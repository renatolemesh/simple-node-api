version: '3.8'

services:
  # MongoDB Database Service
  mongodb:
    image: mongo:7.0
    container_name: products-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: products_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - products-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/products_db --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node.js API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: products-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/products_db
    volumes:
      # Mount source code for live changes
      - ./src:/app/src:ro
      # Mount sample data file for live changes
      - ./src/sample_products.json:/app/src/sample_products.json:ro
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - products-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Data Initialization Service (runs once)
  data-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: products-data-init
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/products_db
    volumes:
      # Mount sample data file for live changes
      - ./src/sample_products.json:/app/src/sample_products.json:ro
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - products-network
    command: ["node", "dist/processDataDocker.js"]
    restart: "no"

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

# Custom network for service communication
networks:
  products-network:
    driver: bridge

